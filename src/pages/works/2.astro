---
import Base from "../../layouts/Base.astro";
import Picture from "../../components/Picture.astro";

const id = 2;
const description = "gradient noise";
---

<Base title={id}>
  <Picture id={id} description={description} />
  <script>
    import P5 from "p5";
    import { randInt } from "../../lib/utils.ts";
    import { picture, type Work } from "../../lib/picture";
    import { canvasSize } from "../../lib/canvas";

    function Picture(p: P5) {
      Object.assign(p, {
        preload() {},
        setup() {
          p.noLoop();
          p.createCanvas(canvasSize, canvasSize);
        },
        draw() {
          const squareWidth = 8;
          const rows = canvasSize / squareWidth;
          const columns = canvasSize / squareWidth;
          p.noStroke();

          const whiteStripeHeight = randInt(rows * 0.05, rows * 0.25);
          const blackStripeHeight = randInt(rows * 0.05, rows * 0.25);

          for (let nx = 0; nx < columns; nx++) {
            for (let ny = 0; ny < rows; ny++) {
              let minLightness;
              let maxLightness;

              const rand = randInt(
                whiteStripeHeight,
                rows - 1 - blackStripeHeight,
              );

              const isDarkSquare = rand <= ny ? 1 : 0;

              const lightnessRange = 30;
              if (isDarkSquare === 1) {
                minLightness = 0;
                maxLightness = minLightness + lightnessRange;
              } else {
                minLightness = 255 - lightnessRange;
                maxLightness = 255;
              }

              const value = randInt(minLightness, maxLightness);
              const color = p.color(value, value, value, 255);
              p.fill(color);
              p.square(nx * squareWidth, ny * squareWidth, squareWidth);
            }
          }
        },
      } satisfies Work);
    }

    picture(Picture);
  </script>
</Base>
